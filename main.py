from flask import Flask
from telegram import Bot
import requests
import time
import threading

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8111573872:AAE_LGmsgtGmKmOxx2v03Tsd5bL28z9bL3Y"
CHAT_ID = 944484522
bot = Bot(token=TOKEN)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ V-reversal –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
def send_signal(message):
    try:
        bot.send_message(chat_id=CHAT_ID, text=message)
        print("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏–≥–Ω–∞–ª–∞ V-—Ä–∞–∑–≤–æ—Ä–æ—Ç–∞)
def analyze_v_reversal():
    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—á–µ–π —Å Binance (–∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–∏–∫–µ—Ä –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        symbol = "WIFUSDT"
        interval = "1h"
        limit = 100
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url)
        data = response.json()

        closes = [float(candle[4]) for candle in data]  # –∑–∞–∫—Ä—ã—Ç–∏—è
        lows = [float(candle[3]) for candle in data]    # –º–∏–Ω–∏–º—É–º—ã
        volumes = [float(candle[5]) for candle in data]

        if len(closes) < 30:
            return

        last_close = closes[-1]
        prev_low = lows[-3]
        last_low = lows[-1]
        last_volume = volumes[-1]
        avg_volume = sum(volumes[-20:]) / 20

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞: –¥–≤–æ–π–Ω–æ–µ –¥–Ω–æ, –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä—ë–º
        if last_low > prev_low and last_volume > 1.2 * avg_volume:
            rr_ratio = 3.2
            stop = round(last_close * 0.97, 4)
            tp = round(last_close * 1.15, 4)

            message = f"üü¢ BUY —Å–∏–≥–Ω–∞–ª (V-–æ–±—Ä–∞–∑–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç)\n" \
                      f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n" \
                      f"–í—Ö–æ–¥: {last_close}\n" \
                      f"–°—Ç–æ–ø: {stop}\n" \
                      f"–¶–µ–ª—å: {tp}\n" \
                      f"R/R: {rr_ratio}:1"

            send_signal(message)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
def auto_loop():
    while True:
        analyze_v_reversal()
        time.sleep(180)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    threading.Thread(target=auto_loop).start()
    app.run(host='0.0.0.0', port=10000)
