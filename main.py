import requests
import time
from telegram import Bot
from flask import Flask
import threading
from datetime import datetime

TOKEN = "8111573872:AAE_LGmsgtGmKmOxx2v03Tsd5bL28z9bL3Y"
CHAT_ID = 944484522
bot = Bot(token=TOKEN)

app = Flask(__name__)

# 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç —Å CoinGecko
def get_top_coins():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": 200,
        "page": 1,
        "sparkline": "false"
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    return []

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞ V-—Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–æ)
def check_signal(coin):
    price = coin['current_price']
    ath = coin['ath']
    volume = coin['total_volume']
    cap = coin['market_cap']
    name = coin['name']
    symbol = coin['symbol'].upper()
    id = coin['id']
    exchanges = ["kraken", "mexc", "bybit"]

    if (
        price <= 3 and
        price > 0 and
        volume >= 1_000_000 and
        cap >= 5_000_000 and
        "usd" not in symbol.lower() and
        not any(bad in symbol.lower() for bad in ["scam", "pig", "turd"]) and
        (ath - price) / ath >= 0.75
    ):
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∏—Ä–∂
        markets_url = f"https://api.coingecko.com/api/v3/coins/{id}/tickers"
        res = requests.get(markets_url)
        if res.status_code == 200:
            data = res.json()
            listed_exchanges = set()
            for item in data["tickers"]:
                ex = item["market"]["identifier"]
                if ex in exchanges:
                    listed_exchanges.add(ex)
            if listed_exchanges:
                return {
                    "name": name,
                    "symbol": symbol,
                    "price": price,
                    "ath": ath,
                    "drop": round((ath - price) / ath * 100, 1),
                    "exchanges": listed_exchanges
                }
    return None

# 4. –†–∞—Å—á—ë—Ç —Ü–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
def send_signal(coin):
    name = coin["name"]
    symbol = coin["symbol"]
    price = coin["price"]

    # === –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–ª–æ–∫ –§–ò–ë–û –∏ TP ===
    tp1 = round(price * 1.272, 4)
    tp2 = round(price * 1.618, 4)
    tp3 = round(price * 2.0, 4)
    tp4 = round(price * 2.618, 4)
    rr_ratio = round((tp4 - price) / (price * 0.03), 1)
    # === –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ===

    msg = f"""üü¢ <b>BUY Signal (V‚ÄëReversal)</b>

üîπ <b>{name} ({symbol})</b>
üí∞ Price: ${price}
üìâ Drop from ATH: {coin["drop"]}%
üìà Targets:
‚ñ´Ô∏èTP1: ${tp1}
‚ñ´Ô∏èTP2: ${tp2}
‚ñ´Ô∏èTP3: ${tp3}
‚ñ´Ô∏èTP4: ${tp4}
üéØ R/R ‚âà {rr_ratio}:1

üìä Exchanges: {', '.join(coin['exchanges'])}
üïí {datetime.utcnow().strftime('%Y-%m-%d %H:%M')} UTC"""

    try:
        bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
    except Exception as e:
        print(f"Telegram error: {e}")

# 5. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
sent_ids = set()

def run_bot():
    while True:
        coins = get_top_coins()
        for coin in coins:
            if coin["id"] in sent_ids:
                continue
            data = check_signal(coin)
            if data:
                send_signal(data)
                sent_ids.add(coin["id"])
        time.sleep(180)

# 6. Flask keep-alive
@app.route('/')
def home():
    return "‚úÖ Bot is running!"

def start_flask():
    app.run(host="0.0.0.0", port=8080)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        bot.send_message(chat_id=CHAT_ID, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        print(f"Telegram error: {e}")
    threading.Thread(target=start_flask).start()
    run_bot()
